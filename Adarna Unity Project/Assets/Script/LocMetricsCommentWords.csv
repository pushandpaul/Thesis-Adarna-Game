Word,Count
=,36
the,26
},18
-,18
public,17
for,12
player,12
initialization,11
new,11
of,10
is,9
to,9
Use,8
this,8
in,8
true;,7
==,7
*,7
called,6
+,6
\"\\,5
once,5
holder,5
false;,5
if,5
per,5
Update,5
bool,5
position,5
frame,5
object,5
!=,4
else,4
character,4
,4
sets,4
routine,4
and,4
void,4
Initialization,4
item,3
default,3
{,3
animation,3
previous,3
return,3
be,3
before,3
Debug.Log,3
private,2
i,2
<,2
[],2
myFollower,2
this.enabled,2
position:,2
destroyed,2
toFlip,2
duration){,2
isAchieved;,2
switchType,2
();,2
Item,2
RIGHT,2
_facingRight){,2
flipPlayer();,2
playerController.setPlayerSate,2
\targetColor,\,2
allowFlip,2
\("\Carry\,2
'a',2
objectData.transform.localScale;,2
'b',2
Name){,2
foreach(FollowTarget,2
Vector3,2
transform.position.ToString());,2
\Debug.Log("\Current\,2
LevelManager.exitInRight,2
\RIGHT"\);\,2
defaultSpawnLeft;,2
used,2
flip:,2
held,2
1f);,2
isActive;,2
if(facingRight,2
Followers){,2
\Debug.Log("\Fading\,2
GetComponent<CircleCollider2D>().offset,2
will,2
\(Idle)"\);\,2
(character.name).transform;,2
\Debug.Log("\Position\,2
not,2
time,2
float,2
colliderOffsetY);,2
\scaleY,\,2
int,2
\("\FACING\,2
GameObject.Find,2
with,2
class,2
\manager,\,2
this.transform.localPosition);,2
l,2
Follower,2
an,2
if(instance,2
game,2
transform.localScale,2
duration,2
s,2
Destroy(myFollower);,2
SceneManager.LoadScene(nextLocation);,2
data,2
_FACING,2
yield,1
changePlayerVersion,1
Followers,1
fact,1
vary,1
that,1
player.transform.rotation);,1
\Vector3(0,\,1
gameManager.searchData,1
gameManager;,1
playerIdleState,1
instant,1
(this.gameObject);,1
Flip,1
offset,1
\Vector2(0,0);\,1
characters,1
another,1
\saved,\,1
if(itemToGive.GetComponent<SpriteRenderer>().sprite,1
persistence,1
objectData.transform.localScale,1
objectData.destroyed,1
List<GameObject>,1
using,1
null;,1
instances,1
which,1
on,1
(new,1
Time.deltaTime;,1
timer.startTimer();,1
search,1
\small,\,1
transform.position,1
IEnumerator,1
ChangePlayerVersion,1
DontDestroyOnLoad(gameObject);,1
specifies,1
avatar,1
other,1
\"\actual"\\,1
\EditorGUILayout.PropertyField(serializedObject.FindProperty("\isNPC"\));\,1
objectiveIndex;,1
0;,1
//saves,1
return;,1
r,1
0));,1
calculatedMaxDistance,1
FindObjectOfType<ChangePlayerVersion>,1
m,1
normal,1
itemToGive.setItem(dayap);,1
Methods,1
\EditorList.Show(serializedObject.FindProperty("\partObjective"\));\,1
as,1
states,1
out,1
\"\instant"\\,1
switching,1
GetComponent<Rigidbody2D>().velocity,1
objectiveMapper.textBox.disableTextBox();,1
event),1
scene,1
defaultSpawnLeft,1
changes,1
\shadowMaxDistance,\,1
players,1
this),1
value,1
target,1
one,1
facingPlayer,1
7f/sec,1
if(!facingRight){,1
targetColor;,1
holderTransfer);,1
while(time,1
there,1
GameManager,1
Followers.Clear();,1
serves,1
at,1
(scales,1
now),1
load;,1
Current;,1
due,1
custom,1
(for,1
\Start"\);\,1
\Vector2(-colliderOffsetX,\,1
heldItem;,1
n,1
objectDataRef.scale,1
allow,1
tempData.scale,1
GetComponentInChildren<ItemToGive>(true);,1
Player,1
\delay"\);\,1
(Transform),1
//simage.color,1
future,1
objectiveTextBox.disableTextBox();,1
\player"\\,1
connection,1
if(waitForPress,1
\in"\);\,1
\medium,\,1
serializedObject.Update();,1
follower){,1
saves,1
after,1
Level,1
gameObject.name);,1
_facingRight),1
DontDestroyOnLoad(follower[i].gameObject);,1
this;,1
changeColor(Color,1
(objectiveMapper.checkIfCurrent,1
allows,1
i++){,1
Local,1
loadPlayerPos,1
placed,1
\Instantiate(playableCharacter,\,1
override,1
image.color,1
uses,1
\EditorGUILayout.PropertyField(serializedObject.FindProperty("\isObject"\));\,1
//facingPlayer,1
flipCharacter(bool,1
()),1
&&,1
removeFollowers(){,1
add,1
null),1
functions,1
setPlayerSate,1
night,1
actual,1
\Color.Lerp(originColor,\,1
may,1
originColor,1
findFollowers(FollowTarget[],1
it,1
max,1
global,1
levelManager;,1
\("\Idle"\);\,1
image.color;,1
Color,1
hits,1
parameters,1
codes,1
\player.transform.position,\,1
break;,1
Minigames,1
Destroy(gameObject);,1
\Vector3(scaleX,\,1
null){,1
FollowTarget,1
myFollower.GetComponent<FollowTarget>().enabled,1
objectivePartIndex;,1
Followers.Remove(myFollower);,1
objectiveTextBox.enableTextBox();,1
0f;,1
runtime,1
Destroy,1
time/duration);,1
\(this.objectData,\,1
Add,1
\player,\,1
save;,1
LevelManager,1
Followers.Add(follower[i].gameObject);,1
large,1
's');,1
destroys,1
removeFollower(string,1
can,1
Match,1
Sprite[],1
(gameManager.currentHeldItem,1
myRenderer.sprite,1
coordinates;,1
objectDataRef.scale;,1
carryItem,1
Input.GetKeyDown(KeyCode.E)){,1
Manager,1
transforms,1
levelIndex);,1
if(myFollower.name,1
changePlayerVersion.actualSwitch,1
+=,1
follower.Length;,1
\3,\,1
followers;,1
OnInspectorGUI(){,1
\currentVersion,\,1
\Vector3(-scaleX,\,1
serializedObject.ApplyModifiedProperties();,1
static,1
destroyList;,1
check,1
moves,1
\Vector2(colliderOffsetX,\,1
instance,1
seconds,1
does,1
a,1
dayap),1
Target,1
saved,1
raycast,1
stays,1
variable,1
List<SavedCharData>();,1
\Debug.Log("\Fading"\);\,1
Change,1
Game,1
from,1
List<FollowTarget>();,1
follows,1
for(int,1
camera,1
\day,\,1
objectivePanelFader.FadeOut(0);,1
use,1
f,1
\(newPlayer,\,1
\endMiniGame("\End\,1
IfPlayAnimation,1
d,1
item;,1
speed,1
\"\Idle"\;\,1
slope,1
\("\Collected:\,1
\"\new\,1
level,1
\Debug.Log("\"\\,1
\ground,\,1
